Замените ln -s на ln -sf. Иначе при повторном запуске init.sh ошибки выдаст.
http://www.computerhope.com/unix/uln.htm﻿
-sf, в отличии от -s, перезаписывает файл, если он уже существует
вдруг кому пригодится


https://www.youtube.com/watch?v=PEKN8NtBDQ0 - Git для новичков

mkdir -p ~/web/{public/{img,js,css},{etc,uploads}}

або

mkdir -p ~/web/{etc,uploads,public}/
mkdir -p ~/web/public/{img,js,css}/

	rm -rf /folder


нужны server блоки и location внутри них http://nginx.org/ru/docs/beginners_guide.html#conf_structure﻿
в них настроить location который отвечает 3 требованиям в задании (ниже коментарии помогут)

сам конфиг  /etc/nginx/nginx.conf менять естественно не надо. nginx при запуске читает все доп.настройки отсюда /etc/nginx/sites-enabled/


Проверка конфига nginx'а:
nginx -t



Чтобы написать корректно nginx.conf
1) http://nginx.org/ru/docs/http/ngx_http_core_module.html#location
﻿2) ﻿http://regexr.com﻿


да тестовый скрипт добавляет файл test.js в Ваши директории. Но при попытки запросить http://10.42.218.172/js/test.js код ответа не 200. Чтобы узнать какой же код ответа можно запустить команду

curl -vv http://10.42.218.172/js/test.js

Пока в ответ от сервера не будет приходить HTTP/1.1 200 OK ﻿тест проходить не будет.


 проще сразу убить дефолтный конфиг:

sudo unlink /etc/nginx/sites-enabled/default




оставлю это здесь:

location  = / {
  # matches the query / only.
  [ configuration A ] 
}
location  / {
  # matches any query, since all queries begin with /, but regular
  # expressions and any longer conventional blocks will be
  # matched first.
  [ configuration B ] 
}
location /documents/ {
  # matches any query beginning with /documents/ and continues searching,
  # so regular expressions will be checked. This will be matched only if
  # regular expressions don't find a match.
  [ configuration C ] 
}
location ^~ /images/ {
  # matches any query beginning with /images/ and halts searching,
  # so regular expressions will not be checked.
  [ configuration D ] 
}
location ~* \.(gif|jpg|jpeg)$ {
  # matches any request ending in gif, jpg, or jpeg. However, all
  # requests to the /images/ directory will be handled by
  # Configuration D.   
  [ configuration E ] 
}





Единственное, хотелось бы уточнить и посоветовать:
1) При входе в терминал надо запустить Ngnix и проверить:
  sudo /etc/init.d/nginx start
  ps -o pid,euser,egroup,comm,args -C nginx
2) В скрипте init.sh, который предлагалось написать, удобней сразу перезаписывать ссылку на дефолтную конфигурацию:
  sudo ln -sf /home/box/web/etc/nginx.conf /etc/nginx/sites-enabled/default




Краткая инструкция по приготовлению к прохождению задания:

Заводим аккаунт на github.com, заводим репозиторий, пусть он называется %reponame%, а ваш ник %username%, соглашаемся его инициализировать. На виртуальной машине создаем папку web (mkdir web) и переходим в нее (cd web)

git clone https://github.com/%username%/%reponame%.git

Создаем init.sh (touch init.sh), прописываем ему права на выполнение (chmod a+x init.sh), создаем папку etc (mkdir etc), копируем туда дефолтный конфиг, он поможет в дальнейшем (cp /etc/nginx/nginx.conf ~/web/etc).

Теперь займемся обустройством git'a. Каждый раз для заливки данных в git нужно будет сперва добавить файлы в коммит (git add *), затем создать коммит локально (git commit -a -m "Описание коммита"), и, наконец, залить его в оригинальный репозиторий (git push). На этом месте не забудьте ваш логин пароль от github'а.

Git может пожаловаться на отсутствие локальных имени и пароля, напомните ему их:

git config --global user.name %username%
git config --global user.email %useremail%

Подготовительный этап окончен! Теперь можете выкачивать репозиторий через удобный клиент (я предпочитаю smartgit) на своем компьютере, править и добавлять файлы, а затем заливать обратно (соответствующие кнопочки commit и push в интерфейсе). На виртуальной машине пользуйтесь командой git pull для подтягивания залитых с локальной машины изменений и наоборот.

Какой минимальный набор конфигурации в nginx? В дефолтной конфигурации nginx оставлять можно только events как есть и пустую директиву http, остальное можно написать, руководствуясь курсом. Если кажется, что nginx не запущен (ps aux | grep nginx покажет все процессы с соответствующими названиями) или запущен с некорректной конфигурацией, проверить ее можно с помощью команды nginx -t.

Как проверить локально, что требования задания выполнены? Залейте какой-нибудь файл в папку public и запросите его с помощью curl -I http://localhost:80/some.file, по заголовку ответа можно будет понять, как среагировал nginx. Если непонятно, почему он отдает 404 там, где должен быть файл (то есть код 200), допишите директиву error_log и загляните в этот лог, скорее всего проблема сразу локализуется.


Если вдруг случайно уничтожили конфиг. файл nginx в папке etc/nginx - востанавливается  этой командой:

sudo dpkg --force-confmiss -i /var/cache/apt/archives/nginx-common_1.4.6-1ubuntu3.4_all.deb ,

простая переустановка не поможет.


sudo, default конфигурация, include параметры в основном nginx.conf, два простых location и лекция позволят быстро решить эту задачу.



1. убедитесь что реальный конфиг существует:
	cat /home/box/web/etc/nginx.conf

2. удалите символическую ссылку
	sudo rm /etc/nginx/sites-enabled/test.conf

3. создайте новую символическую ссылку именно такой командой:
	sudo ln -s /home/box/web/etc/nginx.conf  /etc/nginx/sites-enabled/test.conf

4. снова проверьте чтобы символическая ссылка вела на ваш конфиг:
	cat /etc/nginx/sites-enabled/test.conf

перезапустите nginx и проверьте


команда ln с ключом -s создает симв ссылку  /etc/nginx/sites-enabled/test.conf на  /home/box/web/etc/nginx.conf 



Создаешь проект на своей машине.
Переходишь терминалом в папку с проектом (cd ./path/to/project)
Из этой папки выполянешь git init. Гит должен быть установлен. Это создаст репозиторий.
Идешь на гитхаб. Мышкой создаешь там пустой репозиторий.
В подсказках появится что делать дальше:
 привязать свой репозиторий к удаленном серверу (git remote add origin https://github.com/your_name/stepic_web_project.git﻿)
﻿Потом надо добавить изменения (git add .)
Закомитить их (git commit -m "initial commit")
И отправить на сервер (git push origin master)
﻿
В терминале степика склонировать проект (git clone <link from github> /home/box/web)﻿




Вопреки рекомендациям на предыдущей странице, в init.sh достаточно иметь лишь:

sudo ln -sf /home/box/web/etc/nginx.conf  /etc/nginx/sites-enabled/default
sudo /etc/init.d/nginx restart

что соответствует созданию символической ссылки на наш nginx.conf + перезапуск ngnix.
Остаётся создать структуру пустых каталогов (чтобы коммитились пустые папки, в них надо закинуть любой файл, например нулевого размера, c именем, например empty.dir). И закинуть правильный nginx.conf в соответствующий каталог.



Комментарии для помощи тем, кому тяжело:

1. nginx устанавливать не надо в терминал сервера stepic, он уже там стоит.

2. для того чтобы успешно создать репозиторий на github с указанной структурой папок необходимо чтобы в каждой из папок лежал хотя бы один ЛЮБОЙ файл - я клал файлы text.txt - пустые. После этого можно пользоваться клонированием репозитория на терминал проверяющей системы как указано в предыдущем степе.

3. Тут все предельно понятно и просто, если есть вопросы смотрите видео со степа где объясняется приоритет location, лично я не вижу в этом пункте смысла создавать более двух location. И еще, в location который проверяет в пути uploads лучше использовать root директиву и в пути опустить /uploads

вот так: root /home/box/web/

4. пункт для неподготовленного человека просто вынос мозга - но здесь имеется в виду, что запускать сервер лучше прописывая команды в скрипте init.sh - в коментах написано как сделать это, я предпочел послушать товарища 
@Сергей Ирюпин 
5. этот пункт тоже трудно понять - но здесь все проще чем оговаривается в лекциях и в примере учебном. То что тут написано значит, что нам не обязательно задавать конкретное имя домена - а значит можно вообще не указывать этот параметр в конфиге. А порт можно указать одной строкой: listen 80; больше здесь ничего не нужно. В буквальном смысле для сервера это будет означать что он не прикреплен к какому то определенному url адресу и слушает только порт 80, что в задании и требуется, просто сформулированно это так будто бы как то можно указать серверу чтобы он слушал все url запрашиваемые у него - в действительности же отсутствие указаний к конкретному адресу и означает, что он будет обрабатывать любые адреса(мне понять это было не так очевидно - поэтому и упрощаю задачу последователям).
6. ну здесь гугл и уроки по git в помощь - этот этап нужен скорее для следующих степов, чем для сдачи данного.
Также отмечу если у вас вылетает с ошибкой Failed test 2 - то скорее всего вы неверно сконфигурировали файл конфига либо ссылку неправильно сделали.


У кого не проходит тест 3 с ошибкой:

Failed test #3. http://10.42.218.172/js/test.js didn't returned 200

попробуйте удалить файл /etc/nginx/﻿sites-enabled/default, ﻿﻿ну или изменить секцию ﻿server{ ﻿} внутри этого файла.


